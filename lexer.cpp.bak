#include <bits/stdc++.h>
using namespace std;
typedef long long LL;


const int TINX = 1000;//程序使用1000号结点作为终态结点。（实际应该不会遇到1000结点的nfa吧。。）
const int MAXV = 1005;

struct fa {
    set<char> charset; //字符集
    set<int> starts, terminals, states;
    map<char, vector<int>> nodes[MAXV];

    void addedge(int u, int v, char ch) {
        nodes[u][ch].push_back(v);
        states.insert(u);
        states.insert(v);
        if (ch) charset.insert(ch);
    }

    set<int> epsilon_closure(set<int> nds) {
        set<int> ret;
        queue<int> q;
        for (int u : nds) q.push(u);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            ret.insert(u);
            if (nodes[u].count(0)) 
                for (int sib : nodes[u][0]) q.push(sib);
        }
        return ret;
    }

    set<int> Ia(set<int> nds, char a) {
        set<int> to;
        for (int u : nds) // 对于状态集的每一个状态u
            if (nodes[u].count(a)) // 如果u存在a出边
                for (int sib : nodes[u][a]) // 把a出边通往的所有结点加入to集合
                    to.insert(sib);
        
        return epsilon_closure(to);
    }

    //会改变原来的结构（加入了终态结点）
    fa to_dfa(bool output_table = false) {
        //加入终态结点
        for (int t : terminals) 
            addedge(t, TINX, 0);
        terminals.clear(); terminals.insert(TINX); //这两句对求解没有用，但是加了终态结点，为了一致性，还是把terminals改一下。

        queue<set<int>> q;//BFS的队列，即nodes里未被bfs处理的项
        map<set<int>, map<char, set<int>>> table;// 模拟算法的表格

        q.push(starts);
        while(!q.empty()) {
            set<int> nds = q.front(); q.pop();
            for (char ch : charset) {
                set<int> ia = Ia(nds, ch);
                if (!ia.empty()) {
                    table[nds][ch] = ia;
                    if (!table.count(ia)) q.push(ia);
                }
            }
        }

        //为每个状态集重新分配编号
        map<set<int>, int> inxs; 
        int i = 0;
        for (const auto& e : table) inxs[e.first] = ++i;

        fa dfa;
        for (const auto& row : table) { //遍历表格行
            int inx = inxs[row.first];
            for (const auto& col : row.second)  //遍历一行的每一列
                dfa.addedge(inx, inxs[col.second], col.first);
            if (row.first.count(TINX)) dfa.terminals.insert(inx); //终态
        }
        dfa.starts.insert(inxs[starts]);//初态
        return dfa;
    }
} dfa;
int cnd = 0, lnd = 0;
map<int, int> id;

string code;


//预处理阶段，给code追加行
void append_line(const string& line) {
    bool last_is_space = false;
    for (char c : line) {
        if (c != '\n' && c != '\r') {
            if ((c == '\t' || c == ' ')) {
                if (!last_is_space) {
                    code.push_back(' ');
                    last_is_space = 1;
                } 
            } else {
                code.push_back(c);
                last_is_space = 0;
            }
        }
    }
}

inline void dfa_reset() {
    cnd = *dfa.starts.begin();
    lnd = *dfa.starts.begin();
}
//返回true表示成功走一步，false表示没有边
//当前结点用全局变量cnd表示。
inline bool dfa_push(char ch) {
    if (!dfa.nodes[cnd].count(ch)) return false;
    lnd = cnd;
    cnd = *dfa.nodes[cnd][ch].begin();
    return true;
}
bool dfa_push(const string& x) {
    bool ret = true;
    for (char c : x) 
        ret &= dfa_push(c);
    return ret;
}
void load_dfa() {
    ifstream fin;
    fin.open("dfa.txt");
    int u, v; char c;
    while(1) { //读取终态结点
        fin >> u;
        if (u == -1) break;
        dfa.terminals.insert(u);
    }

    while(1) {
        fin >> u;
        if (u == -1) break;
        fin >> v >> c;
        dfa.addedge(u, v, c);
    }
    fin.close();

    dfa.starts.insert(0);
    dfa = dfa.to_dfa();
    


    fin.open("id_table.txt");
    string token; int x;
    while(fin >> token >> x) {
        dfa_reset();
        dfa_push(token);
        id[cnd] = x;
    }
    fin.close();

    dfa_reset();
}






int main(){
    load_dfa();
    freopen("code.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    string line;
    while(getline(cin, line)) append_line(line);
    string token;
    // for (int i=0; i<code.length(); ++i) {
    //     bool tc = i==code.length()-1 || (isalnum(code[i]) != isalnum(code[i+1]));
        
    //     if (code[i] != ' ') {
    //         if (!dfa_push(code[i])) {
    //             puts("Error");
    //             return 0;
    //         }
    //         token.push_back(code[i]);
    //     } else continue;

    //     if (code[i] == ':' || code[i] == '<' || code[i] == '>') {
    //         dfa_push(code[i+1]);
    //         if (!dfa.terminals.count(code[i])) cnd = lnd;
    //         else {
    //             ++i;
    //             token.push_back(code[i]);
    //         }
    //         cout << "<" << id[cnd] << ", " << token << ">\n";
    //         dfa_reset();
    //         token.clear();
    //     } else if (tc || !isalnum(code[i])) {
    //         cout << "<" << id[cnd] << ", " << token << ">\n";
    //         dfa_reset();
    //         token.clear();
    //     } 
    // }
    for (int i=0; i<code.length(); ) {
        int lastp = -1;
        for (int j=i; j<code.length(); ++j) {
            if (!dfa_push(code[j])) break;
            if (dfa.terminals.count(cnd)) lastp = j;
        }
        if (lastp == -1) {
            puts("Error");
            return 0;
        } 
        cout << "<" << id[cnd] << ", " << code.substr(i, lastp-i+1) << ">\n";
        dfa_reset();
        i=lastp+1+(code[lastp+1]==' ');
    }
    
    

    return 0;
}
